---
description: 
globs: *.css
alwaysApply: false
---
# Styling Rules

## CSS Module Organization
- CSS modules must be co-located with their corresponding component files
- Follow the naming pattern: `ComponentName.module.css` matching `ComponentName.tsx`
- Example structure:
  ```
  src/
  ├── DisplayNpc.tsx
  ├── DisplayNpc.module.css
  ├── UserInput.tsx
  ├── UserInput.module.css
  └── components/
      ├── StatBlock.tsx
      └── StatBlock.module.css
  ```

## CSS Modules Guidelines
- Use semantic class names
- Follow BEM-like naming convention
- Maintain consistent color variables
- Only import CSS modules in their corresponding component file
- Avoid sharing CSS modules across multiple components

## UI Requirements
- Responsive design for all screen sizes
- Themed styling with gradients and fantasy-appropriate colors
- Interactive form controls for customization

## Common Styling Issues
- Clear browser cache if styles don't update
- Check CSS module imports
- Verify class name applications
- Ensure CSS module is imported in the correct component file

## Accessibility Requirements
- Maintain proper color contrast
- Include ARIA labels
- Ensure keyboard navigation
- Support screen readers

## Best Practices
1. Component-Style Coupling:
   - Keep styles closely tied to their components
   - Makes it easier to find and maintain related styles
   - Simplifies component refactoring and deletion

2. Style Isolation:
   - CSS modules provide local scoping
   - Prevents style leaks between components
   - Names are automatically unique per component

3. File Management:
   - When renaming a component, rename its CSS module to match
   - When moving a component, move its CSS module with it
   - Delete CSS module when component is deleted